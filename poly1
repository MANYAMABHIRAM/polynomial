#include <stdio.h>
#include <stdlib.h>
struct node
{
    int co, p;
    struct node *next;
} * temp, *temp1, *newnode, *p, *p1, *s, *head3=NULL,*temp2,*tail,*head4=NULL;
typedef struct node node;
node *create()
{
    int val, pow, coeff;
    node *head = NULL;
    node *tail = NULL;
    do
    {
        printf("\nEnter power:");
        scanf("%d", &pow);
        printf("Enter coefficient:");
        scanf("%d", &coeff);
        newnode = (node *)malloc(sizeof(node));
        newnode->p = pow;
        newnode->co = coeff;
        if (head == NULL)
        {
            head = newnode;
            tail = newnode;
        }
        else
        {
            tail->next = newnode;
            tail = newnode;
        }
        tail->next = NULL;
        printf("Enter 1 to continue:");
        scanf("%d", &val);
    } while (val == 1);
    return head;
}
void display(node *head)
{
    temp = head;
    while (temp->next != NULL)
    {
        printf("%dx^%d+", temp->co, temp->p);
        temp = temp->next;
    }
    printf("%dx^%d", temp->co, temp->p);
}
node *add(node *p, node *p1)
{
    node *per;
    per = (node *)malloc(sizeof(node));
    per->next = NULL;
    temp = per;
    temp1 = p;
    node *temp2;
    temp2 = (node *)malloc(sizeof(node));
    temp2 = p1;
    while (temp1 != NULL && temp2 != NULL)
    {
        if (temp1->p > temp2->p)
        {
            per->p = temp1->p;
            per->co = temp1->co;
            temp1 = temp1->next;
        }
        else if (temp1->p < temp2->p)
        {
            per->p = temp2->p;
            per->co = temp2->co;
            temp2 = temp2->next;
        }
        else
        {
            per->p = temp1->p;
            per->co = temp1->co + temp2->co;
            temp1 = temp1->next;
            temp2 = temp2->next;
        }
        if (temp1 && temp2)
        {
            per->next = (node *)malloc(sizeof(node));
            per = per->next;
            per->next = NULL;
        }
    }
    while (temp1 != NULL || temp2 != NULL)
    {
        per->next = (node *)malloc(sizeof(node));
        per = per->next;
        per->next = NULL;
        if (temp1)
        {
            per->p = temp1->p;
            per->co = temp1->co;
            temp1 = temp1->next;
        }
        else
        {
            per->p = temp2->p;
            per->co = temp2->co;
            temp2 = temp2->next;
        }
    }
    return temp;
}
void multiply(node *head1, node *head2)
{
   int value=0;
	temp1=head1;
	while(temp1!=NULL)
	{
		temp2=head2;
		while(temp2!=NULL)
		{
			newnode=(struct node *)malloc(sizeof(struct node));
			newnode->co=temp1->co*temp2->co;
			newnode->p=temp1->p+temp2->p;
			newnode->next=NULL;
			if(head3==NULL)
			{
				head3=newnode;
				tail=newnode;
			}
			else
			{
				tail->next=newnode;
				tail=newnode;
			}
			temp2=temp2->next;
		}
		temp1=temp1->next;
	}
	temp1=head3;
	while(temp1!=NULL)
	{
		temp2=temp1->next;
		value=temp1->co;
		while(temp2!=NULL)
		{
			if(temp1->p==temp2->p)
			{
				value=value+temp2->co;
				temp=temp1;
				while(temp->next!=temp2)
				{
					temp=temp->next;
				}
				temp->next=temp->next->next;
				temp2=temp2->next;
			}
			temp2=temp2->next;
		}
			newnode=(struct node *)malloc(sizeof(struct node));
			newnode->co=value;
			newnode->p=temp1->p;
			newnode->next=NULL;
			if(head4==NULL)
			{
				head4=newnode;
				tail=newnode;
			}
			else
			{
				tail->next=newnode;
				tail=newnode;
			}
		temp1=temp1->next;
	}
		display(head4);
}
int main()
{
    int ch;
    while (1)
    {
        printf("\n1-Reading\n2-Display\n3-Addition\n4-Multiplication\nEnter your choice:");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            printf("Enter data:");
            p = create();
            printf("Enter data:");
            p1 = create();
            break;
        case 2:
            printf("\n---------Polynomial 1 is------------\n");
            display(p);
            printf("\n---------Polynomial 2 is-------------\n");
            display(p1);
            break;
        case 3:
            s = add(p, p1);
            printf("After addition:\n");
            display(s);
            break;
        case 4:
            multiply(p, p1);
            break;
        default:
            exit(0);
        }
    }
}
